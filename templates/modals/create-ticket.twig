{# Create Ticket Modal #}
<div id="create-ticket-modal" data-modal class="hidden fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
  <div class="bg-white border border-gray-200 rounded-lg shadow-xl w-full max-w-2xl max-h-[90vh] overflow-y-auto">
    <div class="px-6 py-4 border-b border-gray-200 flex justify-between items-center sticky top-0 bg-white">
      <h2 class="text-2xl font-semibold">Create New Ticket</h2>
      <button
        onclick="closeCreateTicketModal()"
        class="text-gray-400 hover:text-gray-600 text-2xl font-bold"
      >
        âœ•
      </button>
    </div>
    <div class="p-6">
      <form id="create-ticket-form" class="space-y-6">
        <div>
          <label for="create-title" class="block text-sm font-medium text-gray-700 mb-1">
            Title *
          </label>
          <input
            id="create-title"
            name="title"
            type="text"
            maxlength="100"
            class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent"
            placeholder="Enter ticket title"
            oninput="updateCharCount('create-title', 'create-title-count', 100)"
          />
          <p class="text-gray-500 text-xs mt-1">
            <span id="create-title-count">0</span>/100 characters
          </p>
        </div>

        <div>
          <label for="create-description" class="block text-sm font-medium text-gray-700 mb-1">
            Description
          </label>
          <textarea
            id="create-description"
            name="description"
            rows="4"
            maxlength="500"
            class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent"
            placeholder="Describe the issue or task (optional)"
            oninput="updateCharCount('create-description', 'create-description-count', 500)"
          ></textarea>
          <p class="text-gray-500 text-xs mt-1">
            <span id="create-description-count">0</span>/500 characters
          </p>
        </div>

        <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
          <div>
            <label for="create-status" class="block text-sm font-medium text-gray-700 mb-1">
              Status *
            </label>
            <select
              id="create-status"
              name="status"
              class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
            >
              <option value="open">Open</option>
              <option value="in_progress">In Progress</option>
              <option value="closed">Closed</option>
            </select>
          </div>

          <div>
            <label for="create-priority" class="block text-sm font-medium text-gray-700 mb-1">
              Priority
            </label>
            <select
              id="create-priority"
              name="priority"
              class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
            >
              <option value="low">Low</option>
              <option value="medium" selected>Medium</option>
              <option value="high">High</option>
            </select>
          </div>
        </div>

        <div class="flex justify-end gap-3 pt-4">
          <button
            type="button"
            onclick="closeCreateTicketModal()"
            class="px-4 py-2 text-sm font-medium rounded-md border border-gray-300 bg-white text-gray-700 hover:bg-gray-50 transition-colors"
          >
            Cancel
          </button>
          <button
            type="submit"
            class="px-4 py-2 text-sm font-medium rounded-md bg-blue-600 text-white hover:bg-blue-700 transition-colors"
          >
            Create Ticket
          </button>
        </div>
      </form>
    </div>
  </div>
</div>

<script>
// Update character count
function updateCharCount(inputId, countId, max) {
  const input = document.getElementById(inputId);
  const count = document.getElementById(countId);
  if (input && count) {
    count.textContent = input.value.length;
  }
}

// Open create ticket modal
function openCreateTicketModal() {
  document.getElementById('create-ticket-modal').classList.remove('hidden');
  document.body.style.overflow = 'hidden';
  // Reset form
  document.getElementById('create-ticket-form').reset();
  document.getElementById('create-title-count').textContent = '0';
  document.getElementById('create-description-count').textContent = '0';
}

// Close create ticket modal
function closeCreateTicketModal() {
  document.getElementById('create-ticket-modal').classList.add('hidden');
  document.body.style.overflow = 'auto';
}

// Handle create ticket form submission
document.getElementById('create-ticket-form').addEventListener('submit', function(e) {
  e.preventDefault();
  
  const title = document.getElementById('create-title').value;
  const description = document.getElementById('create-description').value;
  const status = document.getElementById('create-status').value;
  const priority = document.getElementById('create-priority').value;
  
  // Validate
  const errors = validateTicketForm(title, description);
  
  if (Object.keys(errors).length > 0) {
    displayErrors(errors);
    showToast('Please fix the errors below', 'error');
    return;
  }
  
  // Create ticket
  createTicket({
    title: title.trim(),
    description: description.trim() || undefined,
    status: status,
    priority: priority
  });
  
  showToast('Ticket created successfully!', 'success');
  closeCreateTicketModal();
  
  // Refresh tickets if on tickets page
  if (typeof renderTickets === 'function') {
    renderTickets();
  }
  
  // Update sidebar stats
  updateSidebar();
});
</script>
